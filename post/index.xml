<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Your title</title>
    <link>https://niweiwei163.github.io/post/</link>
    <description>Recent content in Posts on Your title</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 21 Aug 2019 16:15:53 +0800</lastBuildDate>
    
	<atom:link href="https://niweiwei163.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>swift基础学习</title>
      <link>https://niweiwei163.github.io/post/swift%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 21 Aug 2019 16:15:53 +0800</pubDate>
      
      <guid>https://niweiwei163.github.io/post/swift%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</guid>
      <description>基础 /** swift 不需要以;结尾 swift非常注重格式,比如 a = 3（左右对称,不然报错） swift没有宏这个概念,没有类扩展这个概念 swift没有main.m文件 @UIApplicationMain是程序入口标识 swift在当前类中访问属性或者方法的时候 可以省略 self. 推荐不写, 后面的闭包中必须添加self. swift按钮的监听事件 使用 #selector */ func firstDemo1() { //-----------基本类型------- //常量 let a = 10 //变量 var b = 20 //手动指定类型（swift是一个强类型的语言,小数默认类型是double，Int（NSInteger）） let c: Int = 10 let d: CGFloat = 20.3 let e: String = &amp;quot;String&amp;quot; //let res1 = c + d --&amp;gt; 会报错 let res2 = c + Int(d) print(a) // -&amp;gt;打印使用print语法,不用NSLog var name = &amp;quot;name&amp;quot; var site = &amp;quot;site&amp;quot; print(&amp;quot;\(name)的官网地址为：\(site)&amp;quot;) //可选类型,可以为nil var a:Int?</description>
    </item>
    
    <item>
      <title>线程了解</title>
      <link>https://niweiwei163.github.io/post/%E7%BA%BF%E7%A8%8B%E4%BA%86%E8%A7%A3/</link>
      <pubDate>Fri, 12 Jul 2019 16:15:53 +0800</pubDate>
      
      <guid>https://niweiwei163.github.io/post/%E7%BA%BF%E7%A8%8B%E4%BA%86%E8%A7%A3/</guid>
      <description>线程 在 iOS 中其实目前有 4 套多线程方案，他们分别是
  Pthreads NSThread GCD NSOperation &amp;amp; NSOperationQueue   Pthreads 这个其实不怎么用,了解下即可（毕竟做 iOS 开发几乎不可能用到）
- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event { pthread_t thread; //创建一个线程并自动执行 pthread_create(&amp;amp;thread, NULL, start, NULL); } void *start(void *data) { NSLog(@&amp;quot;%@&amp;quot;, [NSThread currentThread]); return NULL; }  看代码就会发现他需要 c语言函数，你需要手动处理线程的各个状态的转换即管理生命周期，比如，这段代码虽然创建了一个线程，但并没有销毁。
NSThread NSThread经过苹果封装后的，并且完全面向对象的。所以你可以直接操控线程对象，非常直观和方便。但是，它的生命周期还是需要我们手动管理，所以这套方案也是偶尔用用，比如 [NSThread currentThread]，它可以获取当前线程类，你就可以知道当前线程的各种属性，用于调试十分方便。
//-----实例方法(常用的,不是全部)------ //创建 NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(run:) object:nil]; NSThread *thread= [[NSThread alloc]initWithBlock:^{ NSLog(@&amp;quot;initWithBlock&amp;quot;); }]; //启动 [thread start]; //是否为主线程 [thread isMainThread] //取消线程 [thread cancel] //判断线程是否正在执行 [thread isExecuting] //判断线程是否已经结束 [thread isFinished] //判断线程是否撤销 [thread isCancelled] //-----类方法(常用的,不是全部)------ //创建子线程并开始，创建后就可执行，不需手动开启 + (void)detachNewThreadWithBlock:(void (^)(void))block; + (void)detachNewThreadSelector:(SEL)selector toTarget:(id)target withObject:(nullable id)argument; //获取当前线程 [NSThread currentThread] //当前代码运行所在线程是否是子线程 [NSThread isMultiThreaded] //当前代码所在线程睡到指定时间 [NSThread sleepUntilDate:[NSDate dateWithTimeIntervalSinceNow:1.</description>
    </item>
    
    <item>
      <title>SDWebImage的使用和理解</title>
      <link>https://niweiwei163.github.io/post/sdwebimage%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 02 Jul 2019 16:15:53 +0800</pubDate>
      
      <guid>https://niweiwei163.github.io/post/sdwebimage%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid>
      <description>一.SDWebImage的使用 1.平常使用的加载图片
无占位图直接加载
[imageView sd_setImageWithURL:imageURL];  有占位图
[imageView sd_setImageWithURL:imageURL placeholderImage:NIWebImagePlaceholder()];  有占位图 ，且加载完图片后，需要做些其他操作，可以使用block回调
[imageView sd_setImageWithURL:imageURL placeholderImage:NIWebImagePlaceholder() completed:^(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL) { }];  选择options的形式加载图片
[imageView sd_setImageWithURL:imageURL placeholderImage:NIWebImagePlaceholder() options:SDWebImageRetryFailed| SDWebImageCacheMemoryOnly]; /*使用可更换optionsType的加载方式 SDWebImageRetryFailed 默认情况下，当URL无法下载时，URL就会被列入黑名单，这样库就不会继续尝试了。此标记禁用此黑名单。 SDWebImageLowPriority 默认情况下，图像下载是在UI交互过程中启动的，这标志禁用该特性，导致在UIScrollView减速方面延迟下载。 SDWebImageCacheMemoryOnly 此标记禁用磁盘缓存 SDWebImageProgressiveDownload 此标志可以进行渐进式下载，在下载过程中，图像会逐步显示，就像浏览器所做的那样。默认情况下，图像只显示一次完全 下载。 SDWebImageRefreshCached 即使缓存了映像，也要尊重HTTP响应缓存控制，并在需要的情况下从远程位置刷新映像。磁盘缓存将由NSURLCache来处理，而不是使用SDWebImage，这会导致轻微的性能下降。这个选项有助于处理在同一个请求URL后面更改的图像，例如Facebook图形api概要图。如果刷新了缓存的图像，那么完成块就会被缓存的图像和最后的图像再次调用一次。只有当你不能用嵌入的缓存破坏参数使你的url静态时，才使用这个标志。 SDWebImageContinueInBackground 在iOS 4+中，如果应用程序进入后台，可以继续下载图片。这是通过请求系统在后台获得额外的时间来完成请求完成的。如果后台任务过期，操作将被取消。 SDWebImageHandleCookies 通过设置NSMutableURLRequest来处理存储在NSHTTPCookieStore中的cookie。HTTPShouldHandleCookies =是的; SDWebImageAllowInvalidSSLCertificates 启用不受信任的SSL证书。用于测试目的。在生产中使用谨慎。 SDWebImageHighPriority 默认情况下，图像按顺序装载在队列中。这个标志把它们移到队列的前面。 SDWebImageDelayPlaceholder 默认情况下，在图像加载时加载占位符图像。此标志将延迟加载占位符图像，直到图像完成加载。 SDWebImageTransformAnimatedImage 我们通常不会在动画图像上调用transformdownloade昏暗委托方法，因为大多数转换代码会把它搞砸。无论如何，使用这个标志来转换它们。 SDWebImageAvoidAutoSetImage 默认情况下，图像会在下载后添加到imageView中。但是在某些情况下，我们想要在设置图像之前有手(例如，应用一个过滤器或将它添加到交叉衰减动画中)使用这个标记如果你想在成功完成时手工设置图像 SDWebImageScaleDownLargeImages 默认情况下，图像会被解码，以尊重它们原来的大小。在iOS上，这一标志将把图像缩小到与设备受限内存兼容的大小。如果“SDWebImageProgressiveDownload”标志设置禁用缩减。 */  2.</description>
    </item>
    
    <item>
      <title>hugo搭建个人博客</title>
      <link>https://niweiwei163.github.io/post/firstblog/</link>
      <pubDate>Tue, 02 Jul 2019 16:15:53 +0800</pubDate>
      
      <guid>https://niweiwei163.github.io/post/firstblog/</guid>
      <description>教程链接：https://www.bilibili.com/video/av51574688
Hugo中文文档 :https://www.gohugo.org/
https://www.gohugo.org/doc/tutorials/installing-on-mac/
Hugo主题:https://themes.gohugo.io/
安装 Hugo Hugo 搭建个人博客前，需要先安装 Git 和 Go 语言开发环境
Mac 安装 Hugo 到 https://github.com/gohugoio/hugo/releases 下载对应的操作系统版本的Hugo二进制文件（hugo或者hugo.exe） Mac下直接使用 Homebrew 安装： Windows 安装 Hugo 在 https://github.com/gohugoio/hugo/releases 下载二进制包安装 安装完成后，在命令行输入以下命令查看安装： 建立 Hugo 站点 使用Hugo快速生成站点，(你希望生成到什么位置 就cd到对应目录),这里是直接在用户目录下生成,站点名称是 blog 创建完成后，在 blog 文件夹下会生成以下文件结构： 创建文章 在站点目录下 创建第一篇文章，放到 post 目录 打开my-first-blog.md
draft 参数控制网站上该页面是否显示。设置为 false 或者去掉该参数才显示
添加主题 为了快速搭建博客，可以使用主题。使用主题后，只需要向 content 文件夹添加 Markdown 文件即可。
Hugo 有主题选择 https://themes.gohugo.io/
进入根站点目录，克安装主题
比如你觉得 Hyde 皮肤不错，找到相关的 GitHub 地址，创建目录 themes，在 themes 目录里把皮肤 git clone 下来 配置主题 为了个人使用，需要修改 config.</description>
    </item>
    
    <item>
      <title>jenkins</title>
      <link>https://niweiwei163.github.io/post/jenkins/</link>
      <pubDate>Tue, 02 Jul 2019 16:15:53 +0800</pubDate>
      
      <guid>https://niweiwei163.github.io/post/jenkins/</guid>
      <description>jenkins
官网：https://plugins.jenkins.io/
参考：https://www.jianshu.com/p/3668979476ad
https://www.jianshu.com/p/41ecb06ae95f
https://www.jianshu.com/p/5007625191d7
排错：http://www.pianshen.com/article/6666238442/
fastlane
参考：https://www.jianshu.com/p/ccaf901d10ae
https://www.jianshu.com/p/70f2237a365a
https://www.jianshu.com/p/3284e43e1b60
https://www.cnblogs.com/ZachRobin/p/10413263.html</description>
    </item>
    
    <item>
      <title>typora基础</title>
      <link>https://niweiwei163.github.io/post/typora%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 02 Jul 2019 16:15:53 +0800</pubDate>
      
      <guid>https://niweiwei163.github.io/post/typora%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</guid>
      <description>一级标题(#) 二级标题(##) 三级标题(###) 常见用法 1.&amp;ldquo;&amp;gt;&amp;rdquo; + 空格
  2.&amp;ldquo;1.&amp;rdquo; +空格
  a b c    3.&amp;ldquo;-&amp;rdquo; + 空格
  a b c   4.分割线： &amp;ldquo;***&amp;rdquo; 或者 &amp;ldquo;&amp;mdash;&amp;rdquo;
5.&amp;rdquo;``&amp;rdquo; 英文状态下 esc下面的按钮
 内容内容内容
 6.&amp;rdquo;** **&amp;rdquo;
 **速度速度 **
 7.&amp;rdquo;* *&amp;rdquo; 或者 &amp;ldquo;_ _&amp;rdquo;
 强调内容
 8.&amp;rdquo;  标签&amp;rdquo;
 下划线
 9.波浪线包起来&amp;rdquo; ~~ ~~&amp;rdquo;
删除线
10.&amp;ldquo;加\转义&amp;rdquo;
 \
+
-
.</description>
    </item>
    
  </channel>
</rss>